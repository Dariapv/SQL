61 SQL QUERIES

1.	Получить полную информацию обо всех проектах.
QUERY: SELECT * FROM Проекты;

2.	Получить полную информацию обо всех проектах в Минске.
QUERY: SELECT * FROM Проекты WHERE Гор = 'Минск';

3.	Получить номера поставщиков, которые обеспечивают проект Пpl.
QUERY: SELECT П№ FROM Поставки WHERE Пр№ = 'Пр1';

4.	Получить все отправки, где количество находится в диапазоне от 300 до 750
включительно.
QUERY: SELECT *
FROM Поставки
WHERE Кол >= 300 and Кол <= 750;

5.	Получить все сочетания "цвета деталей - города деталей".
Замечание. Здесь и в последующих упражнениях термин "все" используется в значении "все, представленные в настоящий момент в базе данных", а не "все возможные".
QUERY: SELECT Цв, Гор
FROM Детали;

6.	Получить все такие тройки "номера поставщиков» - номера деталей - номера проектов", для которых выводимые поставщик, деталь и проект размещены в одном городе.
QUERY: SELECT *
FROM Детали, Поставщики, Проекты
WHERE Детали.Гор = Поставщики.Гор AND Поставщики.Гор = Проекты.Гор;

7.	Получить все такие тройки "номера поставщиков-номера деталей - номера проектов", для которых выводимые поставщик, деталь и проект не размещены в одном городе.
QUERY: SELECT Д№, ПР№, П№
FROM Детали, Поставщики, Проекты
WHERE Детали.Гор <> Поставщики.Гор OR Поставщики.Гор <> Проекты.Гор OR Поставщики.Гор<>Проекты.Гор;

8.	Получить все такие тройки "номера поставщиков - номера деталей - номера проектов", для которых никакие из двух выводимых поставщиков, деталей и проектов не размещены в одном городе.
QUERY: SELECT Д.Д№, П.П№, Пр.Пр№
FROM Детали AS Д, Поставщики AS П, Проекты AS Пр
WHERE Д.Гор<>П.Гор AND П.Гор<>Пр.Гор AND Д.Гор<>Пр.Гор;

9.	Получить номера деталей, поставляемых поставщиком в Минске. 
QUERY: SELECT DISTINCT Д№
FROM Поставки AS Пс, Поставщики AS П
WHERE Гор = 'Минск' AND Пс.П№=П.П№;

10.	Получить номера деталей, поставляемых поставщиком в Минске для проекта в Минске. 
QUERY:SELECT DISTINCT Д№
FROM Поставки AS Пс
WHERE (SELECT П.Гор
FROM Поставщики П
WHERE П.П№ =  Пс.П№)
='Минск'
AND
(SELECT Пр.Гор 
FROM Проекты Пр
WHERE  Пр.Пр№ = Пс.Пр№) = 'Минск';

11.	Получить все пары названий городов, для которых поставщик из первого города обеспечивает проект во втором городе. 
QUERY: SELECT DISTINCT П.Гор, Пр.Гор
FROM Поставщики AS П, Проекты AS Пр
WHERE П.Гор <> Пр.Гор
AND EXISTS
(SELECT * FROM Поставки Пс WHERE Пс.Пр№=Пр.Пр№ AND П.П№=Пс.П№);

12.	Получить номера деталей, поставляемых для всех проектов, обеспечиваемых поставщиком из того же города, где размещен проект. 
QUERY: SELECT Д№
FROM Поставки AS Пс
WHERE (SELECT П.Гор FROM Поставщики П WHERE П.П№=Пс.П№) = (SELECT Пр.Гор FROM Проекты Пр WHERE Пр.Пр№=Пс.Пр№);

13.	Получить номера проектов, обеспечиваемых, по крайней мере, одним поставщиком не из того же города. 
QUERY: SELECT DISTINCT Пр№
FROM Поставки AS Пк
WHERE (SELECT Гор FROM Проекты Пр WHERE Пр.Пр№=Пк.Пр№)<> 
(SELECT Гор FROM Поставщики П
WHERE П.П№=Пк.П№);

14.	Получить общее число проектов, обеспечиваемых поставщиком П5. 
QUERY: SELECT COUNT(*)
FROM (SELECT DISTINCT Пр№ FROM Поставки WHERE П№ = 'П5');

15.	Получить общее количество деталей Д1, поставляемых поставщиком П1.
QUERY:  SELECT SUM(Кол) AS Кол1
FROM Поставки AS Пк
WHERE Пк.П№= 'П1'
AND Пк.Д№ = 'Д1';

16.	Для каждой детали, поставляемой для проекта, получить номер детали, номер проекта и соответствующее общее количество.
QUERY: SELECT Д№, Пр№, SUM(Кол) AS [Кол-во]
FROM Поставки
GROUP BY Д№, Пр№;

17.	Получить номера деталей, поставляемых для некоторого проекта со средним количеством больше 320.
QUERY: SELECT Д№, Avg(Кол) AS [Кол-во]
FROM Поставки
GROUP BY Д№
HAVING Avg(Кол) > 320;

18.	Получить имена проектов, обеспечиваемых поставщиком П1.
QUERY:  SELECT ИмяПр
FROM Поставки AS Пс INNER JOIN Проекты AS Пр ON Пс.Пр№ = Пр.Пр№
WHERE Пс.П№ = "П1";

19.	Получить цвета деталей, поставляемых поставщиком П1. 
QUERY: SELECT Цв
FROM Детали AS Д
WHERE Д№ IN(
 SELECT Д№ 
 FROM Поставки Пс
 WHERE П№ = "П1"
 AND Пс.Д№ = Д.Д№);

20.	Получить номера деталей, поставляемых для какого-либо проекта в Минске. 
QUERY: SELECT Д№
FROM детали AS Д
WHERE EXISTS (
 SELECT Пр.Пр№ 
 FROM Проекты Пр
 INNER JOIN Поставки П
 ON П.Пр№ = Пр.Пр№
 WHERE Гор="Минск");

21.	Получить номера проектов, использующих по крайней мере одну деталь, имеющуюся у поставщика П1.
QUERY: SELECT DISTINCT Пк.Пр№
FROM Поставки AS Пк
WHERE Пк.Д№ IN 
(SELECT Д№ 
FROM Поставки 
WHERE П№ = "П1");

22.	 Получить номера проектов, город которых стоит первым в алфавитном списке городов.
QUERY: SELECT Пр№
FROM Проекты
WHERE Гор =
(SELECT MIN(Гор) 
FROM Проекты);

23.	Получить номера проектов, для которых среднее количество поставляемых деталей Д1 больше, чем наибольшее количество любых деталей, поставляемых для проекта Пpl.
QUERY: SELECT Пр№
FROM Поставки AS Пс
WHERE Д№ = "Д1"
GROUP BY Пр№
HAVING Avg(Кол) >(
 SELECT min(Кол)
 FROM Поставки
 WHERE Пр№ = "Пр1");

24.	Получить номера поставщиков, поставляющих деталь Д1 для некоторого проекта в количестве, большем среднего количества деталей Д1 в поставках для этого проекта. 
QUERY: SELECT Пс1.П№
FROM Поставки AS Пс1
WHERE Пс1.Д№ = "Д1"
AND Пс1.кол >
(SELECT AVG (Пс.кол)
FROM Поставки Пс
WHERE Пс.Пр№ =Пс1.Пр№
AND Пс.Д№="Д1");

25.	Получить номера деталей, поставляемых для минских проектов. 
QUERY: SELECT DISTINCT Д№
FROM Поставки AS Пс
WHERE Пр№ IN 
(SELECT Пр№ FROM Проекты 
WHERE Гор="Минск");

26.	Получить номера поставщиков, поставляющих одну и ту же деталь для всех проектов. 
QUERY: SELECT DISTINCT П№
FROM Поставки AS Пс
WHERE NOT EXISTS (
  SELECT *
  FROM Проекты Пр
  WHERE NOT EXISTS (
    SELECT *
    FROM Поставки пс1
    WHERE Пс1.П№ = Пс.П№
    AND Пс1.Д№ = Пс.Д№
    AND Пс1.пр№ = Пр.Пр№  ));

27.	Получить номера проектов, обеспечиваемых, по крайней мере, всеми деталями поставщика П1.
QUERY: SELECT Пр№
FROM Поставки AS Пс
WHERE NOT EXISTS
(SELECT Пс.Д№
FROM Поставки Пс1
WHERE NOT EXISTS
(SELECT Пс2.Д№
FROM Поставки Пс2
WHERE Пс2.П№='П1' AND Пс2.Д№=Пс1.Д№));

28.	Получить номера деталей, поставляемых либо минским поставщиком, либо для минского проекта. 
QUERY: SELECT DISTINCT Пс.Д№
FROM Поставки AS Пс
WHERE (((Пс.[П№]) In (SELECT П№
  FROM Поставщики П
  WHERE П.гор = "Минск"))) OR (((Пс.[Пр№]) In (SELECT Пр№
  FROM Проекты Пр
  WHERE Пр.гор = "Минск" )));

29.	Получить пары "номер поставщика- номер детали" такие, что данный поставщик не поставляет данную деталь.
QUERY: SELECT П№, Д№
FROM Поставщики AS П, Детали AS Д
WHERE NOT EXISTS
(SELECT П№,Д№
FROM Поставки Пс
WHERE П.П№=Пс.П№ AND Д.Д№=Пс.Д№);

30.	Получить имена поставщиков, поставляющих все детали.
QUERY: SELECT П.Имя_П
FROM Поставщики AS П
WHERE П.П№ IN
(SELECT Пс.П№
FROM Поставки Пс
WHERE NOT EXISTS 
(SELECT Д.Д№
FROM Детали Д
WHERE NOT EXISTS
(SELECT Пс1.Д№
FROM Поставки Пс1
WHERE Пс1.П№ = Пс.П№
AND Пс1.Д№ = Пс.Д№)));

31.	Сколько и какие детали поставляет поставщик П5 проектам не в Минске.
QUERY: SELECT Пс.П№
FROM Поставки AS Пс
GROUP BY Пс.П№
HAVING (((MAX(Пс.[кол]))>2*(SELECT
AVG(Кол) FROM Поставки Пс2
WHERE Пс2.П№ <> Пс.П№)));

32.	Получить номера поставщиков, у которых максимальное значение поставки как минимум в 2 раза превышает среднее значение поставок деталей остальными поставщиками.
QUERY: SELECT Пс.П№
FROM Поставки AS Пс
GROUP BY Пс.П№
HAVING (((MAX(Пс.[кол]))>2*(SELECT
AVG(Кол) FROM Поставки Пс2
WHERE Пс2.П№ <> Пс.П№)));

33.	Выбрать все строки из таблицы c перевозчиками.
QUERY: select * from Shippers;
+-----------+------------------+----------------+
| ShipperID | ShipperName      | Phone          |
+-----------+------------------+----------------+
|         1 | Speedy Express   | (503) 555-9831 |
|         2 | United Package   | (503) 555-3199 |
|         3 | Federal Shipping | (503) 555-9931 |
+-----------+------------------+----------------+

34.	Выбрать первые 3 строки из таблицы c сотрудниками.
QUERY: select * from Employees limit 3;
+----------------------------------------------------------------------------------------------
|          1 | Davolio   | Nancy     | 1968-12-08 | EmpID1.pic | Education includes a BA in na.
|          2 | Fuller    | Andrew    | 1952-02-19 | EmpID2.pic | Andrew received his BTS vice. 
|          3 | Leverling | Janet     | 1963-08-30 | EmpID3.pic | Janet has a BS degree in ative
+----------------------------------------------------------------------------------------------

35.	Из таблицы сотрудников выбрать все имена, фамилии, дни рождения в следующем порядке: BirthDate, FirstName, LastName, количество строк в выборке ограничить 3-мя.
QUERY: select Employees.BirthDate, Employees.FirstName, Employees.LastName from Employees limit 3;
+------------+-----------+-----------+
| BirthDate  | FirstName | LastName  |
+------------+-----------+-----------+
| 1968-12-08 | Nancy     | Davolio   |
| 1952-02-19 | Andrew    | Fuller    |
| 1963-08-30 | Janet     | Leverling |
+------------+-----------+-----------+

36.	Выбрать имена и фамлии сотрудников, родившихся в 1958 году.
QUERY: select Employees.FirstName, Employees.LastName from Employees where year(Employees.BirthDate)=1958;
+-----------+----------+
| FirstName | LastName |
+-----------+----------+
| Margaret  | Peacock  |
| Laura     | Callahan |
+-----------+----------+

37.	Выбрать все товары с ценой от 23 до 25.
QUERY: select * from Products where Products.Price between 23 and 25;
+-----------+------------------------------+------------+------------+-------------------+-------+
| ProductID | ProductName                  | SupplierID | CategoryID | Unit              | Price |
+-----------+------------------------------+------------+------------+-------------------+-------+
|         6 | Grandma's Boysenberry Spread |          3 |          2 | 12 - 8 oz jars    | 25.00 |
|        14 | Tofu                         |          6 |          7 | 40 - 100 g pkgs.  | 23.25 |
|        55 | Pbtu chinois                 |         25 |          6 | 24 boxes x 2 pies | 24.00 |
+-----------+------------------------------+------------+------------+-------------------+-------+

38.	Найти товары с минимальной ценой.
QUERY: select * from Products where Products.Price = (select min(Products.Price) from Products);
+-----------+-------------+------------+------------+-------+-------+
| ProductID | ProductName | SupplierID | CategoryID | Unit  | Price |
+-----------+-------------+------------+------------+-------+-------+
|        33 | Geitost     |         15 |          4 | 500 g |  2.50 |
+-----------+-------------+------------+------------+-------+-------+

39.	Найти товары с максимальной ценой. 
QUERY: select * from Products where Products.Price = (select max(Products.Price) from Products);
+-----------+---------------+------------+------------+--------------------+--------+
| ProductID | ProductName   | SupplierID | CategoryID | Unit               | Price  |
+-----------+---------------+------------+------------+--------------------+--------+
|        38 | Cute de Blaye |         18 |          1 | 12 - 75 cl bottles | 263.50 |
+-----------+---------------+------------+------------+--------------------+--------+

40.	Выбрать все товары, у которых Unit '10 pkgs.'.
QUERY: select * from Products where Products.Unit = '10 pkgs.';
+-----------+-------------+------------+------------+----------+-------+
| ProductID | ProductName | SupplierID | CategoryID | Unit     | Price |
+-----------+-------------+------------+------------+----------+-------+
|        48 | Chocolade   |         22 |          3 | 10 pkgs. | 12.75 |
+-----------+-------------+------------+------------+----------+-------+

41.	Выбрать адреса поставщиков, которые проживают в одном из городов: Tokyo, Frankfurt, Osaka. 
QUERY: select Suppliers.Address from Suppliers where (Suppliers.City='Tokyo' or Suppliers.City= 'Frankfurt' or Suppliers.City= 'Osaka') ;
+---------------------------+
| Address                   |
+---------------------------+
| 9-8 Sekimai Musashino-shi |
| 92 Setsuko Chuo-ku        |
| Bogenallee 51             |
+---------------------------+

42.	Выбрать название товаров начинающихся с буквы “G”, у которых цена больше 37.
QUERY: select Products.ProductName from Products where Products.ProductName like 'G%' and Products.Price > '37';
+------------------------+
| ProductName            |
+------------------------+
| Gnocchi di nonna Alice |
+------------------------+

43.	 Вывести список стран начинающихся на S и состоящих из 5 букв, из которых есть поставщики. 
QUERY: select Suppliers.Country from Suppliers where Suppliers.Country like 'S%' and char_length(Suppliers.Country)=5;
+---------+
| Country |
+---------+
| Spain   |
+---------+

44.	 Вывести сумму всех товаров, в названии которых содержится ”od”, столбец назвать Summ.
QUERY: select sum(Products.Price) as Summ from Products where Products.ProductName like '%od%';
+--------+
| Summ   |
+--------+
| 131.00 |
+--------+

45.	 Вывести среднюю сумму товаров, поставляемых в бутылках, округлив до 2-х знаков после запятой, столбец назвать Summ. 
QUERY: select round((avg(Products.Price)),2) as Summ from Products where Products.Unit like '%bottle%';
+-------+
| Summ  |
+-------+
| 37.03 |
+-------+

46.	 Найти количество клиентов, которые НЕ проживают в Франции и Германии,  столбец назвать Countt.
QUERY: select count(Customers.Country) as Countt from Customers where Customers.Country not like 'France' and Customers.Country not like'Germany';
+--------+
| Countt |
+--------+
|     69 |
+--------+

47.	 Вывести имена сотрудников, родившихся после 01.01.1968 года. Отсортировать результат по имени.
QUERY: select Employees.FirstName from Employees where Employees.BirthDate>'1968-01-01' order by Employees.FirstName;
+-----------+
| FirstName |
+-----------+
| Anne      |
| Nancy     |
+-----------+

48.	 Выбрать названия товаров, у которых Price = 13 или 15 и отсортировать по возрастанию, использовать Select команды с объединением результатов через UNION.
QUERY: select Products.ProductName from Products  where Products.Price='13.00' UNION select Products.ProductName from Products where Products.Price='15.00' ORDER BY ProductName;
+---------------------------------+
| ProductName                     |
+---------------------------------+
| Original Frankfurter grine Soae |
| Outback Lager                   |
| Rud Kaviar                      |
+---------------------------------+

49.	 Показать имена товаров, в названии которых третяя буква m и названия их поставщиков.
QUERY: select Products.ProductName, Suppliers.SupplierName from Products inner join Suppliers on Suppliers.SupplierID=Products.SupplierID where Products.ProductName like '__m%' ;
+---------------------------+-----------------------------------+
| ProductName               | SupplierName                      |
+---------------------------+-----------------------------------+
| Gumbur Gummiburchen       | Heli Swaren GmbH & Co. KG         |
| Camembert Pierrot         | Gai puturage                      |
| Wimmers gute Semmelknudel | Plutzer Lebensmittelgroumurkte AG |
+---------------------------+-----------------------------------+

50.	Показать имена и фамилии сотрудника, который оформил заказ 1996-11-27 (написать запрос двумя способами: через INNER Join, и используя подзапрос).
QUERY 1:  select Employees.FirstName, Employees.LastName from Employees inner join Orders on Employees.EmployeeID=Orders.EmployeeID where Orders.OrderDate = '1996-11-27'; 
QUERY 2: select Employees.FirstName, Employees.LastName from Employees where Employees.EmployeeID =(select Orders.EmployeeID from Orders where Orders.OrderDate = '1996-11-27') ;
+-----------+-----------+
| FirstName | LastName  |
+-----------+-----------+
| Janet     | Leverling |
+-----------+-----------+


51.	Выбрать все товары, у которых поставщик «Grandma Kelly's Homestead» и цена > 27. В результате вывести 3 колонки: Product, Supplier, Price.
QUERY: select Products.ProductName, Suppliers.SupplierName, Products.Price from Products join Suppliers on Products.SupplierID=Suppliers.SupplierID where Suppliers.SupplierName like "Grandma Kelly's Homestead" and Products.Price>"27";
+---------------------------------+---------------------------+-------+
| ProductName                     | SupplierName              | Price |
+---------------------------------+---------------------------+-------+
| Uncle Bob's Organic Dried Pears | Grandma Kelly's Homestead | 30.00 |
| Northwoods Cranberry Sauce      | Grandma Kelly's Homestead | 40.00 |
+---------------------------------+---------------------------+-------+

52.	 Вывести суммарное количество продукта 'Queso Cabrales' (столбец обозвать Summ), отправленного всем покупателям (написать запрос двумя способами: через INNER Join, и используя подзапрос).
QUERY 1: select sum( OrderDetails.Quantity) as Summ from OrderDetails inner join Products on OrderDetails.ProductID = Products.ProductID where Products.ProductName like 'Queso Cabrales';
QUERY 2: select sum( OrderDetails.Quantity) as Summ from OrderDetails where OrderDetails.ProductID = (select Products.ProductID  from Products  where Products.ProductName like 'Queso Cabrales');
+------+
| Summ |
+------+
|  182 |
+------+

53.	Показать все заказы, которые были отправлены по адресу «Ekergatan 24» с их заказчиками и сотрудниками. В результате вывести 3 колонки – ID заказа, имя заказчика, имя сотрудника, фамилия сотрудника.
QUERY: select Orders.OrderID, Customers.CustomerName, Employees.FirstName, Employees.LastName from Orders inner join Customers on Orders.CustomerID=Customers.CustomerID inner join Employees on Orders.EmployeeID=Employees.EmployeeID where Customers.Address like 'Ekergatan 24';
+---------+----------------+-----------+-----------+
| OrderID | CustomerName   | FirstName | LastName  |
+---------+----------------+-----------+-----------+
|   10264 | Folk och fe HB | Michael   | Suyama    |
|   10327 | Folk och fe HB | Andrew    | Fuller    |
|   10378 | Folk och fe HB | Steven    | Buchanan  |
|   10434 | Folk och fe HB | Janet     | Leverling |
+---------+----------------+-----------+-----------+

54.	Преобразовать предыдущий запрос таким образом, чтобы те же данные выводились в 3-х колонках – объединить LastName и FirstName из Employees в одну колонку через пробел и назвать ее EmployeeName (2 LEFT JOINS). 
QUERY: select  Orders.OrderID, Customers.CustomerName, concat(Employees.FirstName,' ', Employees.LastName) as EmployeeName from Orders left join Customers on Orders.CustomerID=Customers.CustomerID left join Employees on Orders.EmployeeID=Employees.EmployeeID where Customers.Address like 'Ekergatan 24';
+---------+----------------+-----------------+
| OrderID | CustomerName   | EmployeeName    |
+---------+----------------+-----------------+
|   10264 | Folk och fe HB | Michael Suyama  |
|   10327 | Folk och fe HB | Andrew Fuller   |
|   10378 | Folk och fe HB | Steven Buchanan |
|   10434 | Folk och fe HB | Janet Leverling |
+---------+----------------+-----------------+

55.	Показать все продукты, содержащиеся в заказах 1997-го года и в названии которых менее 5 букв. В результате вывести OrderID, OrderDate, ProductName (написать запрос двумя способами: через INNER JOINS, и используя подзапросы).
QUERY 1: select Orders.OrderID, OrderDate, ProductName from Orders inner join OrderDetails on Orders.OrderID=OrderDetails.OrderID  inner join Products on OrderDetails.ProductID=Products.ProductID  where ((char_length(Products.ProductName)<5) and (year(Orders.OrderDate)= 1997));
QUERY 2: select Orders.OrderID, Orders.OrderDate, Products.ProductName from Orders inner join OrderDetails on Orders.OrderID=OrderDetails.OrderID  inner join Products on OrderDetails.ProductID=Products.ProductID  where Products.ProductName in (select Products.ProductName from Products where char_length(Products.ProductName) <5) and Orders.OrderDate in (select Orders.OrderDate from Orders where year(Orders.OrderDate)= 1997);
+---------+------------+-------------+
| OrderID | OrderDate  | ProductName |
+---------+------------+-------------+
|   10409 | 1997-01-09 | Tofu        |
|   10412 | 1997-01-13 | Tofu        |
|   10427 | 1997-01-27 | Tofu        |
+---------+------------+-------------+

56.	Показать названия продуктов и их категорий, которые используются в заказах от заказчика по имени Blondel père et fils и категории которых состоят как минимум из 2-х слов.
QUERY: select Categories.CategoryName, Products.ProductName from Categories inner join Products on Categories.CategoryID = Products.CategoryID inner join OrderDetails on Products.ProductID = OrderDetails.ProductID inner join Orders on OrderDetails.OrderID=Orders.OrderID inner join Customers on Orders.CustomerID = Customers.CustomerID where CustomerName like 'Blondel pere et fils' and Categories.CategoryName like "% %";
+----------------+------------------------+
| CategoryName   | ProductName            |
+----------------+------------------------+
| Dairy Products | Mozzarella di Giovanni |
+----------------+------------------------+

57.	 Вывести количество заказчиков (колонку назвать Buyers), которые сделали заказали один из  продуктов: «Queso Cabrales», «Gustaf's Knäckebröd», «Louisiana Fiery Hot Pepper Sauce», «Schoggi Schokolade», «Gnocchi di nonna Alice».
QUERY: select count(distinct(Orders.CustomerID)) as Buyers from Orders where Orders.OrderID in (select OrderDetails.OrderID from OrderDetails where OrderDetails.ProductID in (select Products.ProductID from Products where (Products.ProductName = "Queso Cabrales")  or (Products.ProductName like "Gustaf's Knäckebröd") or (Products.ProductName like "Louisiana Fiery Hot Pepper Sauce") or (Products.ProductName like "Schoggi Schokolade") or (Products.ProductName like "Gnocchi di nonna Alice")));
+--------+
| Buyers |
+--------+
|     25 |
+--------+


58.	 *Найти города в которые было отправлено больше всего заказов, вывести назание города и количество заказов (колонку назвать Amount).
QUERY: select Customers.City, count(Orders.OrderID) as Amount from Customers inner join Orders on Customers.CustomerID = Orders.CustomerID group by Customers.City having count(Orders.OrderID) = (select max(OrderCount) from ( select count(Orders.OrderID) as OrderCount  from Orders inner join Customers on Orders.CustomerID = Customers.CustomerID group by City)  as Q);
+--------+--------+
| City   | Amount |
+--------+--------+
| Graz   |     10 |
+--------+--------+

59.	 *Найти из какого города было поставлено наибольшее количество единиц товаров в Лондон, вывести название города и количество единиц (колонку назвать Amount).
QUERY: select Suppliers.City, sum(OrderDetails.Quantity) as Amount from OrderDetails inner join  Orders on OrderDetails.OrderID = Orders.OrderID inner join Products on OrderDetails.ProductID = Products.ProductID inner join Suppliers on Products.SupplierID = Suppliers.SupplierID inner join Customers on Orders.CustomerID = Customers.CustomerID where Customers.City like "London" group by Suppliers.City having sum(OrderDetails.Quantity) = (select max(Qua) from (select sum(OrderDetails.Quantity) as Qua from OrderDetails inner join  Orders on OrderDetails.OrderID = Orders.OrderID inner join Products on OrderDetails.ProductID = Products.ProductID inner join Suppliers on Products.SupplierID = Suppliers.SupplierID inner join Customers on Orders.CustomerID = Customers.CustomerID where Customers.City like "London" group by Suppliers.City)as Q);
+---------+--------+
| City    | Amount |
+---------+--------+
| Annecy  |     80 |
| Ravenna |     80 |
+---------+--------+

60.	 *Найти перевозчиков, которые перевезли более 30 разнообразных напитков (Beverages), вывести имена перевозчиков, категорию товара и количество перевезенных видов товара (колонку назвать Amount).
QUERY: select Shippers.ShipperName, Categories.CategoryName, count(OrderDetails.Quantity) from Shippers inner join Orders on Shippers.ShipperID = Orders.ShipperID inner join OrderDetails on Orders.OrderID = OrderDetails.OrderID inner join Products on OrderDetails.ProductID = Products.ProductID inner join Categories on Products.CategoryID = Categories.CategoryID  where CategoryName like 'Beverages' group by Shippers.ShipperName, Categories.CategoryName having count(OrderDetails.Quantity) > 30 ;
+------------------+--------------+--------+
| ShipperName      | CategoryName | Amount |
+------------------+--------------+--------+
| Federal Shipping | Beverages    |     31 |
| United Package   | Beverages    |     37 |
+------------------+--------------+--------+

61.	 *Найти среднюю стоимость приправ (Condiments) отправленных в штаты, заказы на которые оформлены Margaret Peacock, вывести стоимость округленную до 2-х знаков после запятой (колонку назвать Average)
QUERY: select round(avg(Products.Price), 2)  as Average from Products inner join Categories on Products.CategoryID = Categories.CategoryID inner join OrderDetails on Products.ProductID = OrderDetails.ProductID inner join Orders on OrderDetails.OrderID = Orders.OrderID inner join Customers on Orders.CustomerID = Customers.CustomerID inner join Employees on Orders.EmployeeID=Employees.EmployeeID where Categories.CategoryName like "Condiments" and Employees.FirstName like "Margaret" and  Employees.LastName like "Peacock" and Customers.Country like "USA" ;
+---------+
| Average |
+---------+
|   30.17 |
+---------+